import random

dishes = """Паста карбонара
Греческий салат
Суши с лососем
Лазанья
Цезарь с курицей
Роллы с тунцом
Карри с курицей
Стейк из говядины
Пицца Маргарита
Том ям суп
Фрикасе
Шаурма
Пельмени с мясом
Салат нисуаз
Паста с морепродуктами
Гуакамоле с тортильей
Омлет с овощами
Фаршированные перцы
Салат "Оливье"
Рататуй
Курица терияки
Спагетти болоньезе
Салат "Капрезе"
Рыбные тако
Шницель
Суп мисо
Салат с авокадо и креветками
Жаркое из овощей
Сэндвич с индейкой
Рыбный пай
Тартар из лосося
Картошка по-деревенски
Салат с рукколой и пармезаном
Суп-харчо
Семга с картошкой-пюре
Сэндвич с тунцом
Гаспачо
Фрикадельки
Картошка фри
Мексиканский рис с фасолью
Куриные крылья барбекю
Шоколадный мусс
Яичница с беконом
Рыбный тартар
Картошка с грибами
Фондю
Тайский суп с креветками
Рулеты из куриного филе
Паста альфредо
Салат "Цезарь" с лососем
Лапша рамен
Салат "Греческий" с кальмарами
Ризотто с грибами
Картошка с маслом и зеленью
Суп с клецками
Картофельные дольки
Стейк тунца
Суп с лососем
Салат "Витаминный"
Фриттата с овощами
Печеный картофель
Коктейль "Пина Колада"
Шашлык из курицы
Суп-пюре
Макароны по-флотски
Рататуй по-провански
Паста с лососем и шпинатом
Салат "Айсберг" с креветками
Лосось на гриле
Суп с фрикадельками
Картошка по-шведски
Чизкейк с малиновым соусом
Салат с киноа и авокадо
Пицца с грибами и ветчиной
Сэндвич с лососем
Жареный рис с овощами
Суп с курицей и лапшой
Кесадильи с курицей
Лимонный тарт
Салат "Лолло Россо" с креветками
Овощи на гриле
Капкейки с шоколадной глазурью
Спагетти с мидиями
Ризотто с креветками
Картошка с копченым лососем
Курица в терияки-соусе
Рыбные котлеты
Суп-гаспачо
Шоколадный фондан
Салат с кинзой и курицей
Паста с грибами и томатами
Лосось в кляре
Салат "Мимоза"
Сырники с вареньем
Карри с креветками
Гренки с чесноком
Суп с шампиньонами
Мороженое в вафельном стаканчике
Ризотто с лососем
Фруктовый салат""".split("\n")

import psycopg2

conn = psycopg2.connect("dbname=PetProject user=postgres password=1234")
cur = conn.cursor()

sql = """create table if not exists dish(
        dish_id integer primary key,
        name varchar(60)
        );
        
        create table if not exists customer(
        customer_id integer primary key,
        name varchar(60),
        auth varchar(10)
        );
        
        create schema menu;
        alter schema menu owner to postgres;
"""
cur.execute(sql)

for ind, val in enumerate(dishes, start=1):
    sql = """
    INSERT INTO dish (dish_id, name) VALUES
    (%s, %s);
    """
    cur.execute(sql, (ind, val))

cust = [(1, 'Заведение1', 'key1'),
        (2, 'Заведение2', 'key2'),
        (3, 'Заведение3', 'key3'),
        (4, 'Заведение4', 'key4'),
        (5, 'Заведение5', 'key5'),
        (6, 'Заведение6', 'key6'),
        (7, 'Заведение7', 'key7'),
        (8, 'Заведение8', 'key8'),
        (9, 'Заведение9', 'key9'),
        (10, 'Заведение10', 'key10')]

for i1 in cust:
    i, j, k = i1

    sql = """
    INSERT INTO customer (customer_id, name, auth) VALUES
    (%s, %s, %s);
    """
    cur.execute(sql, (i, j, k))


for i1 in cust:
    ind, _, key = i1

    sql1 = """create table if not exists menu.menu_{}(
        dish_id integer primary key,
        cost real,
        FOREIGN KEY (dish_id) REFERENCES dish (dish_id)
);
""".format(key)
    cur.execute(sql1)

    for di in random.sample(dishes, 30):
        id_d = dishes.index(di) + 1
        sql = """
        INSERT INTO menu.menu_{} (dish_id, cost) VALUES
        (%s, %s);
        """.format(key)

        cur.execute(sql, (id_d, random.randint(10000, 100000) / 100))

conn.commit()
cur.close()
conn.close()